# This workflow will run tests using node and then publish a package to GitHub Packages when a release is created
# For more information see: https://help.github.com/actions/language-and-framework-guides/publishing-nodejs-packages

name: npm-publish

on:
  release:
    types: [published]
  push:
    branches:
      - develop
      - staging
      - main # Change this to your default branch

jobs:
  packages:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com
          scope: '@plitzi'

      - name: Cache multiple paths
        id: cache-packages
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn Install
        if: steps.cache-packages.outputs.cache-hit != 'true'
        run: yarn install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  lint:
    needs: packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/plitzi

      - name: Restore Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn Lint
        run: yarn lint

      - name: Yarn Scss Lint
        run: yarn lint-style

  tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/plitzi

      - name: Restore Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn Tests
        run: yarn test

  publish-github:
    if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/plitzi

      - name: Restore Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

      - name: Yarn Build
        run: yarn build-assets:prod

      - name: Yarn Publish
        run: yarn publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

  # publish-s3:
  #   if: github.event_name == 'release' && startsWith(github.ref, 'refs/tags/v')
  #   needs: tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: 20
  #         registry-url: https://npm.pkg.github.com/plitzi
  #     - name: Restore Cache
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         path: '**/node_modules'
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ secrets.CACHE_VERSION }}-${{ hashFiles('**/yarn.lock') }}

  #     - name: Yarn Build
  #       run: yarn build-assets:prod-gzip

  #     - name: Read package.json
  #       uses: tyankatsu0105/read-package-version-actions@v1
  #       with:
  #         path: '.'
  #       id: package-version

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Deploy static site to S3 bucket
  #       run: |
  #         aws s3 sync ./dist/ s3://plitzi-plugins/com.COMPANY/pluginType/v${{steps.package-version.outputs.version}} --exclude "*" --include "*.js" --include "*.css" --content-encoding gzip --delete
  #         aws s3 sync ./dist/ s3://plitzi-plugins/com.COMPANY/pluginType/v${{steps.package-version.outputs.version}} --exclude "*" --include "*.json" --delete
